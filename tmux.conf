unbind C-b
set -g prefix ^A
bind a send-prefix

bind ^A last-window
bind * list-clients
bind A command-prompt "rename-window %%"
bind k confirm-before "kill-window"

bind ^L {
  refresh-client
  display-message "Window refreshed."
}

set -g history-limit 32768

bind j command-prompt -p "Join pane from:" "join-pane -s '%%'"
bind b break-pane

# Highlight the pane in the status bar when there's no activity for 30 seconds.
# This is useful for long-running builds and such, so you know when they're done.
bind m {
  setw monitor-silence 30
  display-message "30-second silence monitor set."
  set-hook -g pane-focus-in 'setw monitor-silence 0'
}

# Resize panes using control and "vi-direction keys". The "-r" option allows
# repeating the key so you can repeat until the pane size is right.
bind -r C-j resize-pane -D
bind -r C-k resize-pane -U
bind -r C-h resize-pane -L
bind -r C-l resize-pane -R

bind r {
  source-file ~/.tmux.conf
  display-message "Configuration reloaded."
}

set -g set-titles on
set -g set-titles-string "#T #W"
set-window-option -g automatic-rename on

set -g renumber-windows on

set -g monitor-activity on  # Visual indicator for activity in a pane.
set -g visual-activity off  # ...but don't put a long message on the status line.

set -g pane-border-style fg=red
set -g pane-active-border-style fg=yellow,bg=default

set-window-option -g clock-mode-colour red
set-window-option -g clock-mode-style 12

set -g message-style bg=black,fg=brightyellow,bright
set-window-option -g mode-style bg=black,fg=yellow

set -g status-style fg=black,bg=black,bright
set -g status-interval 5
set -g status-justify right

set-window-option -g window-status-format '#I/#W'
set-window-option -g window-status-current-format '#I/#W'
set-window-option -g window-status-style fg=colour58,bg=black
set-window-option -g window-status-current-style fg=red,bg=black

set -g status on
set -g status-justify left
set -g status-left-length 35

if-shell "test -f ~/.exposed" {
  # Color indicator for hosts that are directly exposed to the dirty Internet.
  set-environment -g fg "white"
  set-environment -g bg "colour52"
} {
  # Otherwise, just yellow on black.
  set-environment -g fg "yellow"
  set-environment -g bg "black"
}

set -g status-left '#[fg=#{fg},bg=#{bg}] #(hostname -s) #[default] [#(cat $HOME/.country)] '
set -g status-right-length 60
set -g status-right '#[fg=lightgray,nobold,bg=black] #[fg=lightgray,nobold]#(TZ=America/Costa_Rica date +"%%Y%m%%d %%H:%M %%Z %%z")'

set -g status-keys vi

set -g default-terminal "tmux-256color"
set -as terminal-features ",xterm-256color:RGB"

# Allow time for complex escape sequences (like alt + arrow keys) to work
# without delaying noticably from a human perspective.
set -g escape-time 10

bind Escape copy-mode

# vi-style buffer nav and copy/paste.
set-window-option -g mode-keys vi

# If `xclip` is installed, enable (y)anking a selection from the buffer into the clipboard.

if-shell -b "command -v xclip >/dev/null 2>&1" {

  set -g set-clipboard external

  # Use system clipboard instead of the tmux buffer.
  bind-key ] run-shell "xclip -o -selection clipboard | tmux load-buffer - ; tmux paste-buffer"

  # Text-selection happens either with the "v" key or by highlighting with the mouse.
  bind -T copy-mode-vi v send-keys -X begin-selection
  bind -T copy-mode-vi MouseDrag1Pane send-keys -X begin-selection

  # Selections are made only via "(y)ank".
  bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "sed 's/[ \t]*$//' | xclip -sel clip"

  # Use "(y)ank" instead of these:
  unbind -T copy-mode-vi A
  unbind -T copy-mode-vi D
  unbind -T copy-mode-vi MouseDragEnd1Pane
  unbind -T root DoubleClick1Pane
  unbind -T root TripleClick1Pane

  bind -T copy-mode-vi Enter send -X cursor-down
  bind -T copy-mode-vi C-j send -X cursor-down

  bind -T copy-mode-vi Escape send-keys -X cancel
  bind -T copy-mode-vi q send-keys -X cancel
  bind -T copy-mode-vi C-c send-keys -X cancel

} "display-message 'xclip not installed, clipboard functions disabled'"

# For vim-gitgutter.
#set -g focus-events on

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'git@bitbucket.com:user/plugin'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'tmux-plugins/tmux-sessionist'

# tmux-logging
set -g @plugin 'tmux-plugins/tmux-logging'
set -g @logging-path "~/log"

# tmux-logging cmd reference:
#   start logging.......... prefix + shift + p
#   capture current pane... prefix + alt + p
#   save complete history.. prefix + alt + shift + p

# Fetch the tmux plugin manager if it's not already installed.
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# Initialize tmux plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
